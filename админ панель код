<!doctype html>
<html lang="ru">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Админ-панель бронирований | GHELIOS TRANS</title>
        <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
        <style>
            :root {
                --primary: #2c3e50;
                --secondary: #3498db;
                --danger: #e74c3c;
                --success: #27ae60;
                --warning: #f39c12;
                --light: #ecf0f1;
                --dark: #34495e;
            }

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
                touch-action: manipulation;
            }

            body {
                background-color: #f5f7fa;
                color: #333;
                line-height: 1.6;
                padding: 0;
            }

            .container {
                max-width: 100%;
                min-height: 100vh;
                background: white;
                overflow-x: hidden;
            }

            header {
                background: linear-gradient(
                    135deg,
                    var(--primary),
                    var(--dark)
                );
                color: white;
                padding: 12px 15px;
                position: sticky;
                top: 0;
                z-index: 100;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .header-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-wrap: nowrap;
                gap: 12px;
            }

            .logo {
                display: flex;
                align-items: center;
                gap: 10px;
                min-width: 0;
                flex: 1;
            }

            .logo-image {
                height: 40px;
                min-width: 40px;
                background: white;
                padding: 3px;
                border-radius: 6px;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-shrink: 0;
            }

            .logo-image img {
                height: 34px;
                max-width: 120px;
                object-fit: contain;
            }

            .logo-text {
                font-size: 0.95rem;
                font-weight: 600;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                min-width: 0;
            }

            .admin-info {
                display: flex;
                align-items: center;
                gap: 8px;
                flex-shrink: 0;
            }

            .admin-avatar {
                width: 36px;
                height: 36px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.2);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 16px;
                flex-shrink: 0;
            }

            .content {
                padding: 15px;
            }

            .section-title {
                margin-bottom: 15px;
                color: var(--primary);
                font-size: 1.2rem;
                position: relative;
                padding-bottom: 8px;
                display: flex;
                align-items: center;
                gap: 6px;
            }

            .section-title::after {
                content: "";
                display: block;
                flex-grow: 1;
                height: 2px;
                background: linear-gradient(90deg, var(--primary), transparent);
                border-radius: 2px;
            }

            .tabs {
                display: flex;
                gap: 8px;
                margin-bottom: 12px;
                flex-wrap: wrap;
            }

            .tab-btn {
                padding: 10px 14px;
                border: 1px solid #e0e6ed;
                border-radius: 10px;
                background: #fff;
                color: var(--primary);
                cursor: pointer;
                font-weight: 600;
            }

            .tab-btn.active {
                background: var(--secondary);
                color: #fff;
                border-color: var(--secondary);
            }

            .tab-pane {
                display: none;
            }

            .tab-pane.active {
                display: block;
            }

            .admin-controls {
                background: #f8fafc;
                padding: 12px;
                border-radius: 14px;
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
                margin-bottom: 15px;
            }

            .admin-filters {
                display: flex;
                flex-direction: column;
                gap: 10px;
                margin-bottom: 8px;
            }

            .filter-row {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
            }

            .filter-item {
                flex: 1;
                min-width: 120px;
            }

            .filter-label {
                font-size: 0.85rem;
                font-weight: 600;
                color: var(--primary);
                margin-bottom: 5px;
                display: block;
            }

            .admin-filters select,
            .admin-filters input {
                padding: 12px;
                border: 1px solid #e0e6ed;
                border-radius: 10px;
                font-size: 0.95rem;
                width: 100%;
                background: white;
                transition: all 0.3s;
            }

            .admin-filters select:focus,
            .admin-filters input:focus {
                border-color: var(--secondary);
                outline: none;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
            }

            .trip-selector {
                background: white;
                border-radius: 12px;
                padding: 15px;
                margin-bottom: 15px;
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
                border-left: 4px solid var(--secondary);
            }

            .trip-selector-title {
                font-size: 1rem;
                font-weight: 600;
                color: var(--primary);
                margin-bottom: 10px;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .stats-cards {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
                margin: 12px 0;
            }

            .stat-card {
                background: white;
                border-radius: 12px;
                padding: 12px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
                border-left: 4px solid var(--secondary);
            }

            .stat-card h3 {
                font-size: 0.85rem;
                margin-bottom: 6px;
                color: #7f8c8d;
                display: flex;
                align-items: center;
                gap: 5px;
            }

            .stat-card .value {
                font-size: 1.4rem;
                font-weight: 700;
                color: var(--dark);
            }

            .stat-card.booked {
                border-left-color: var(--danger);
            }

            .stat-card.booked .value {
                color: var(--danger);
            }

            .stat-card.confirmed {
                border-left-color: var(--success);
            }

            .stat-card.confirmed .value {
                color: var(--success);
            }

            .stat-card.free {
                border-left-color: var(--success);
            }

            .bookings-list {
                display: flex;
                flex-direction: column;
                gap: 12px;
                margin-bottom: 25px;
            }

            .booking-card {
                background: white;
                border-radius: 14px;
                padding: 16px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
                position: relative;
                overflow: hidden;
                transition: all 0.3s ease;
            }

            .booking-card.compact {
                padding: 10px 12px;
            }

            .card-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 12px;
                padding-bottom: 12px;
                border-bottom: 1px solid #f0f0f0;
            }

            .booking-card.compact .card-header {
                margin-bottom: 0;
                padding-bottom: 0;
                border-bottom: none;
            }

            .seat-info {
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .seat-number {
                font-size: 1.6rem;
                font-weight: 700;
                color: var(--primary);
                min-width: 40px;
            }

            .booking-card.compact .seat-number {
                font-size: 1.3rem;
            }

            .status-badge {
                padding: 6px 12px;
                border-radius: 16px;
                font-size: 0.85rem;
                font-weight: 600;
                display: inline-block;
            }

            .status-booked {
                background: #fce4d6;
                color: var(--danger);
            }

            .status-confirmed {
                background: #d4edda;
                color: var(--success);
            }

            .status-free {
                background: #e1f0fa;
                color: var(--secondary);
            }

            .booking-details {
                display: grid;
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .detail-item {
                display: flex;
                flex-direction: column;
            }

            .detail-label {
                font-size: 0.8rem;
                color: #7f8c8d;
                margin-bottom: 4px;
                font-weight: 500;
            }

            .detail-value {
                font-size: 1rem;
                font-weight: 500;
                word-break: break-all;
            }

            .action-btns {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                margin-top: 16px;
            }

            .action-btn {
                flex: 1;
                padding: 12px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-weight: 600;
                transition: all 0.2s;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 6px;
                font-size: 0.9rem;
                min-width: 100px;
            }

            .action-btn.confirm {
                background: var(--success);
                color: white;
            }

            .action-btn.cancel {
                background: var(--danger);
                color: white;
            }

            .action-btn.edit {
                background: var(--warning);
                color: white;
            }

            .action-btn.whatsapp {
                background: #25d366;
                color: white;
            }

            .action-btn.telegram {
                background: #0088cc;
                color: white;
            }

            .action-btn.viber {
                background: #7360f2;
                color: white;
            }

            .action-btn.call {
                background: #2ecc71;
                color: white;
            }

            .action-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .loader-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(255, 255, 255, 0.9);
                backdrop-filter: blur(5px);
                z-index: 1000;
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                transition: all 0.3s ease;
                opacity: 0;
                visibility: hidden;
            }

            .loader-container.active {
                opacity: 1;
                visibility: visible;
            }

            .loader {
                position: relative;
                width: 60px;
                height: 60px;
                margin: 0 auto;
            }

            .loader:before,
            .loader:after {
                content: "";
                position: absolute;
                border-radius: 50%;
                animation-duration: 1.8s;
                animation-iteration-count: infinite;
                animation-timing-function: ease-in-out;
                filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.1));
            }

            .loader:before {
                width: 100%;
                height: 100%;
                background-color: rgba(52, 152, 219, 0.2);
                animation-name: pulse;
            }

            .loader:after {
                width: 80%;
                height: 80%;
                background-color: var(--secondary);
                top: 10%;
                left: 10%;
                animation-name: pulse-inner;
            }

            .loader-text {
                margin-top: 20px;
                color: #333;
                font-size: 16px;
                font-weight: 500;
                text-align: center;
            }

            @keyframes spin {
                0% {
                    transform: rotate(0deg);
                }
                100% {
                    transform: rotate(360deg);
                }
            }

            @keyframes pulse {
                0%,
                100% {
                    transform: scale(0.8);
                    opacity: 0.5;
                }
                50% {
                    transform: scale(1);
                    opacity: 1;
                }
            }

            @keyframes pulse-inner {
                0%,
                100% {
                    transform: scale(1);
                    opacity: 0.8;
                }
                50% {
                    transform: scale(0.8);
                    opacity: 0.5;
                }
            }

            .no-data {
                text-align: center;
                padding: 25px 15px;
                color: #7f8c8d;
                background: white;
                border-radius: 14px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
                margin: 15px 0;
            }

            .export-btn {
                background: var(--primary);
                color: white;
                border: none;
                padding: 14px;
                border-radius: 10px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
                font-size: 0.95rem;
                width: 100%;
                margin-top: 10px;
            }

            .export-btn:hover {
                background: var(--dark);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }

            .modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                z-index: 200;
                display: flex;
                justify-content: center;
                align-items: center;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
            }

            .modal.active {
                opacity: 1;
                visibility: visible;
            }

            .modal-content {
                background: white;
                border-radius: 16px;
                padding: 25px;
                max-width: 500px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                transform: scale(0.8);
                transition: all 0.3s ease;
            }

            .modal.active .modal-content {
                transform: scale(1);
            }

            .modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                padding-bottom: 15px;
                border-bottom: 2px solid #f0f0f0;
            }

            .modal-title {
                font-size: 1.3rem;
                font-weight: 600;
                color: var(--primary);
            }

            .modal-close {
                background: none;
                border: none;
                font-size: 1.5rem;
                cursor: pointer;
                color: #7f8c8d;
                transition: color 0.3s;
            }

            .modal-close:hover {
                color: var(--danger);
            }

            .form-group {
                margin-bottom: 15px;
            }

            .form-label {
                display: block;
                margin-bottom: 5px;
                font-weight: 600;
                color: var(--primary);
                font-size: 0.95rem;
            }

            .form-input {
                width: 100%;
                padding: 12px;
                border: 1px solid #e0e6ed;
                border-radius: 10px;
                font-size: 0.95rem;
                transition: all 0.3s;
            }

            .form-input:focus {
                border-color: var(--secondary);
                outline: none;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
            }

            .form-actions {
                display: flex;
                gap: 10px;
                margin-top: 20px;
                padding-top: 15px;
                border-top: 1px solid #f0f0f0;
            }

            .btn-modal {
                flex: 1;
                padding: 12px;
                border: none;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s;
                font-size: 0.95rem;
            }

            .btn-modal.save {
                background: var(--success);
                color: white;
            }

            .btn-modal.cancel {
                background: #f8f9fa;
                color: var(--dark);
                border: 1px solid #e0e6ed;
            }

            @media (max-width: 768px) {
                .content {
                    padding: 10px;
                }

                .filter-row {
                    flex-direction: column;
                }

                .stats-cards {
                    grid-template-columns: 1fr;
                }

                .action-btns {
                    flex-direction: column;
                }

                .modal-content {
                    margin: 20px;
                    width: calc(100% - 40px);
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <header>
                <div class="header-content">
                    <div class="logo">
                        <div class="logo-image">
                            <i
                                class="fas fa-bus"
                                style="color: var(--primary); font-size: 24px"
                            ></i>
                        </div>
                        <div class="logo-text">GHELIOS TRANS</div>
                    </div>
                    <div class="admin-info">
                        <div class="admin-avatar">
                            <i class="fas fa-user-shield"></i>
                        </div>
                        <span>Админ</span>
                    </div>
                </div>
            </header>

            <div class="content">
                <div class="tabs">
                    <button class="tab-btn active" data-tab="bookingsTab"><i class="fas fa-list"></i> Бронирования</button>
                    <button class="tab-btn" data-tab="createTripTab"><i class="fas fa-plus-circle"></i> Создать рейс</button>
                    <button class="tab-btn" data-tab="statsTab"><i class="fas fa-chart-bar"></i> Статистика и бухгалтерия</button>
                    <button class="tab-btn" data-tab="codeLookupTab"><i class="fas fa-qrcode"></i> Поиск по коду</button>
                </div>

                <div id="bookingsTab" class="tab-pane active">
                    <div class="trip-selector">
                        <div class="trip-selector-title"><i class="fas fa-calendar-alt"></i>Выбор рейса для управления</div>
                        <div class="filter-row">
                            <div class="filter-item">
                                <label class="filter-label">Активный рейс:</label>
                                <select id="activeTripSelector">
                                    <option value="">Выберите рейс...</option>
                                </select>
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Действие:</label>
                                <button id="loadTripBtn" class="action-btn" style="background:var(--secondary);color:#fff;margin-top:0">
                                    <i class="fas fa-download"></i> Загрузить рейс
                                </button>
                                <button id="loadAllTripsBtn" class="action-btn" style="background:var(--success);color:#fff;margin-top:5px" onclick="loadAllTripsStatistics()">
                                    <i class="fas fa-chart-bar"></i> Общая статистика
                                </button>
                            </div>
                        </div>
                    </div>

                    <div id="currentTripInfo" class="trip-selector" style="display:none">
                        <div class="trip-selector-title">
                            <i class="fas fa-info-circle"></i>
                            Текущий рейс: <span id="currentTripDate">-</span>
                        </div>
                    </div>

                    <div class="bookings-list" id="bookingsList">
                        <div class="no-data">
                            <i class="fas fa-bus" style="font-size:3rem;margin-bottom:15px;color:#ddd"></i>
                            <h3>Выберите рейс для отображения бронирований</h3>
                            <p>Используйте селектор выше для выбора активного рейса</p>
                        </div>
                    </div>

                    <button class="export-btn" onclick="exportToExcel()">
                        <i class="fas fa-file-excel"></i> Экспорт в Excel
                    </button>
                </div>

                <div id="createTripTab" class="tab-pane">
                    <div class="trip-selector">
                        <div class="trip-selector-title"><i class="fas fa-plus"></i>Создать рейс</div>
                        <div class="filter-row">
                            <div class="filter-item">
                                <label class="filter-label">Дата рейса</label>
                                <input type="date" id="newTripDate" />
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Направление</label>
                                <select id="newTripDirection">
                                    <option value="">Авто по дню недели</option>
                                    <option value="Молдова → Россия">Молдова → Россия</option>
                                    <option value="Россия → Молдова">Россия → Молдова</option>
                                </select>
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Базовая цена (лей)</label>
                                <input type="number" id="newTripBasePrice" placeholder="500" />
                            </div>
                        </div>
                        <div class="filter-row">
                            <div class="filter-item">
                                <label class="filter-label">Расходы: топливо</label>
                                <input type="number" id="newFuelCost" />
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Расходы: еда пассажирам</label>
                                <input type="number" id="newFoodCost" />
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Прочие расходы</label>
                                <input type="number" id="newOtherCosts" />
                            </div>
                        </div>
                        <div class="filter-row">
                            <div class="filter-item">
                                <label class="filter-label">Еда водителям</label>
                                <input type="number" id="newDriverFoodCost" />
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Базовая валюта</label>
                                <select id="newBaseCurrency">
                                    <option value="">Не указано</option>
                                    <option value="EUR">EUR</option>
                                    <option value="MDL">MDL</option>
                                    <option value="RUB">RUB</option>
                                </select>
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Курс EUR→MDL</label>
                                <input type="number" id="newRateEurMdl" step="0.0001" />
                            </div>
                            <div class="filter-item">
                                <label class="filter-label">Курс EUR→RUB</label>
                                <input type="number" id="newRateEurRub" step="0.0001" />
                            </div>
                        </div>
                        <button class="action-btn" style="background:var(--secondary);color:#fff" onclick="createTripFromAdmin()">
                            <i class="fas fa-save"></i> Создать рейс
                        </button>
                    </div>
                </div>

                <div id="statsTab" class="tab-pane">
                    <div class="admin-controls">
                        <h3 class="section-title"><i class="fas fa-filter"></i>Фильтры и статистика</h3>

                        <div class="admin-filters">
                            <div class="filter-row">
                                <div class="filter-item">
                                    <label class="filter-label">Период от:</label>
                                    <input type="date" id="dateFrom" />
                                </div>
                                <div class="filter-item">
                                    <label class="filter-label">Период до:</label>
                                    <input type="date" id="dateTo" />
                                </div>
                            </div>

                            <div class="filter-row">
                                <div class="filter-item">
                                    <label class="filter-label">Статус:</label>
                                    <select id="statusFilter">
                                        <option value="">Все статусы</option>
                                        <option value="свободно">Свободно</option>
                                        <option value="забронировано">Забронировано</option>
                                        <option value="подтверждено">Подтверждено</option>
                                    </select>
                                </div>
                                <div class="filter-item">
                                    <label class="filter-label">Направление:</label>
                                    <select id="routeFilter">
                                        <option value="">Все направления</option>
                                        <option value="Молдова → Россия">Молдова → Россия</option>
                                        <option value="Россия → Молдова">Россия → Молдова</option>
                                    </select>
                                </div>
                            </div>

                            <button id="applyFiltersBtn" class="action-btn" style="background:var(--primary);color:#fff;margin-top:10px">
                                <i class="fas fa-search"></i> Применить фильтры
                            </button>
                        </div>

                        <div class="stats-cards">
                            <div class="stat-card">
                                <h3><i class="fas fa-chair"></i> Всего мест</h3>
                                <div class="value" id="totalSeats">-</div>
                            </div>
                            <div class="stat-card booked">
                                <h3><i class="fas fa-clock"></i> Забронировано</h3>
                                <div class="value" id="bookedSeats">-</div>
                            </div>
                            <div class="stat-card confirmed">
                                <h3><i class="fas fa-check-circle"></i> Подтверждено</h3>
                                <div class="value" id="confirmedSeats">-</div>
                            </div>
                            <div class="stat-card free">
                                <h3><i class="fas fa-check"></i> Свободно</h3>
                                <div class="value" id="freeSeats">-</div>
                            </div>
                        </div>

                                      <div class="trip-selector">
              <div class="trip-selector-title"><i class="fas fa-calculator"></i>Параметры рейса</div>
              <div class="filter-row">
                <div class="filter-item">
                  <label class="filter-label">Дата рейса</label>
                  <select id="settingsTripSelector">
                    <option value="">Выберите рейс...</option>
                  </select>
                </div>
                <div class="filter-item">
                  <label class="filter-label">Направление</label>
                  <select id="settingsDirection">
                    <option value="Молдова → Россия">Молдова → Россия</option>
                    <option value="Россия → Молдова">Россия → Молдова</option>
                  </select>
                </div>
                <div class="filter-item">
                  <label class="filter-label">Базовая цена</label>
                  <input id="settingsBasePrice" type="number" />
                </div>
              </div>
              <div class="filter-row">
                <div class="filter-item"><label class="filter-label">Расход топливо</label><input id="settingsFuelCost" type="number" /></div>
                <div class="filter-item"><label class="filter-label">Еда пассажирам</label><input id="settingsFoodCost" type="number" /></div>
                <div class="filter-item"><label class="filter-label">Доп расходы</label><input id="settingsOtherCosts" type="number" /></div>
              </div>
              <div class="filter-row">
                <div class="filter-item"><label class="filter-label">Еда водителям</label><input id="settingsDriverFoodCost" type="number" /></div>
                <div class="filter-item"><label class="filter-label">База валюта</label>
                  <select id="settingsBaseCurrency"><option value="EUR">EUR</option><option value="MDL">MDL</option><option value="RUB">RUB</option></select>
                </div>
                <div class="filter-item"><label class="filter-label">Курс EUR→MDL</label><input id="settingsRateEurMdl" type="number" step="0.0001" /></div>
                <div class="filter-item"><label class="filter-label">Курс EUR→RUB</label><input id="settingsRateEurRub" type="number" step="0.0001" /></div>
              </div>
              <button class="action-btn" style="background:var(--success);color:#fff" onclick="saveTripSettingsFromAdmin()"><i class="fas fa-save"></i> Сохранить параметры</button>
              <div class="trip-selector" style="margin-top:12px">
                <div class="trip-selector-title"><i class="fas fa-file-invoice-dollar"></i>Сводка по рейсу</div>
                <div id="accountingSummary" class="booking-details"></div>
              </div>
            </div>
                    </div>
                </div>

                <div id="codeLookupTab" class="tab-pane">
                    <div class="trip-selector">
                        <div class="trip-selector-title"><i class="fas fa-qrcode"></i>Поиск брони по коду</div>
                        <div class="filter-row">
                            <div class="filter-item">
                                <label class="filter-label">Код брони</label>
                                <input type="text" id="lookupCode" placeholder="Например, AB2C3D7" />
                            </div>
                            <div class="filter-item" style="align-self:flex-end">
                                <button class="action-btn" style="background:var(--primary);color:#fff" onclick="lookupByCode(false)"><i class="fas fa-search"></i> Найти</button>
                            </div>
                        </div>
                        <div id="lookupResult"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Booking Modal -->
        <div class="modal" id="editModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Редактировать бронирование</h3>
                    <button class="modal-close" onclick="closeEditModal()">&times;</button>
                </div>
                <form id="editForm">
                    <div class="form-group"><label class="form-label">Имя пассажира</label><input type="text" class="form-input" id="editName" required /></div>
                    <div class="form-group"><label class="form-label">Телефон</label><input type="tel" class="form-input" id="editPhone" required /></div>
                    <div class="form-group"><label class="form-label">Email</label><input type="email" class="form-input" id="editEmail" required /></div>
                    <div class="form-group"><label class="form-label">Город посадки</label><input type="text" class="form-input" id="editFromCity" required /></div>
                    <div class="form-group"><label class="form-label">Город высадки</label><input type="text" class="form-input" id="editToCity" required /></div>
                    <div class="form-group"><label class="form-label">Вес багажа (кг)</label><input type="number" class="form-input" id="editLuggageWeight" min="0" /></div>
                    <div class="form-group"><label class="form-label">Мест багажа</label><input type="number" class="form-input" id="editLuggagePieces" min="0" /></div>
                    <div class="form-group"><label class="form-label">Фактическая оплата</label><input type="number" class="form-input" id="editActualPrice" min="0" step="0.01" /></div>
                    <div class="form-actions">
                        <button type="button" class="btn-modal cancel" onclick="closeEditModal()">Отмена</button>
                        <button type="submit" class="btn-modal save">Сохранить</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="loader-container" id="loader">
            <div class="loader"></div>
            <div class="loader-text">Загрузка данных...</div>
        </div>

        <script>
            const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw4mxF8WVsobklKyE82Woe4fFeD6lvN7WoynwDvhC1D3FPBnlsOs9iuvQ_ByYPDdjX3aQ/exec';

            let currentTripDate = null;
            let allBookings = [];
            let filteredBookings = [];
            let availableTrips = [];
            let tripSettings = {};

            document.addEventListener("DOMContentLoaded", function () {
                initializeApp();
                setupEventListeners();
                setupTabs();
            });

            function setupTabs() {
                document.querySelectorAll('.tab-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        document.querySelectorAll('.tab-btn').forEach(b=>b.classList.remove('active'));
                        document.querySelectorAll('.tab-pane').forEach(p=>p.classList.remove('active'));
                        btn.classList.add('active');
                        const tab = btn.getAttribute('data-tab');
                        document.getElementById(tab).classList.add('active');
                    });
                });
            }

            function setupEventListeners() {
                document.getElementById("loadTripBtn").addEventListener("click", loadSelectedTrip);
                document.getElementById("applyFiltersBtn").addEventListener("click", applyFilters);
                document.getElementById("editForm").addEventListener("submit", saveEditedBooking);

                ["dateFrom","dateTo","statusFilter","routeFilter"].forEach(id=>{
                    const el = document.getElementById(id);
                    if (el) el.addEventListener("change", applyFilters);
                });

                document.getElementById("activeTripSelector").addEventListener("change", function() {
                    if (this.value === "") {
                        document.getElementById("currentTripInfo").style.display = "none";
                        allBookings = [];
                        filteredBookings = [];
                        updateStatistics();
                        renderBookings([]);
                    }
                });
            }

            async function initializeApp() {
                showLoader("Загрузка доступных рейсов...");
                try {
                    await loadAvailableTrips();
                    setDefaultDateRange();
                    // Заполняем селектор настроек
                    const settingsSel = document.getElementById('settingsTripSelector');
                    settingsSel.innerHTML = '<option value="">Выберите рейс...</option>';
                    availableTrips.forEach(d=>{ const o=document.createElement('option'); o.value=d; o.textContent=formatTripDate(d); settingsSel.appendChild(o); });
                    settingsSel.addEventListener('change', loadTripSettingsIntoForm);
                } catch (error) {
                    console.error("Initialization error:", error);
                    showError("Ошибка загрузки данных: " + (error.message || error));
                } finally {
                    hideLoader();
                }
            }

            async function loadAllTripsStatistics() {
                try {
                    showLoader("Загрузка общей статистики...");
                    allBookings = [];

                    const results = await Promise.all(
                        availableTrips.map(tripDate =>
                            makeGoogleScriptRequest("getSeats", { tripDate })
                                .then(tripData => (tripData || []).map(b => ({ ...b, tripDate })))
                                .catch(err => {
                                    console.warn(`Не удалось загрузить рейс ${tripDate}:`, err);
                                    return [];
                                })
                        )
                    );

                    allBookings = results.flat();

                    currentTripDate = null;
                    document.getElementById("activeTripSelector").value = "";
                    document.getElementById("currentTripInfo").style.display = "none";

                    applyFilters();
                } catch (error) {
                    console.error("Error loading all trips statistics:", error);
                    showError("Ошибка загрузки общей статистики: " + (error.message || error));
                } finally {
                    hideLoader();
                }
            }

            async function loadAvailableTrips() {
                try {
                    const response = await makeGoogleScriptRequest("getTripDates");
                    availableTrips = response || [];

                    const selector = document.getElementById("activeTripSelector");
                    selector.innerHTML = '<option value="">Выберите рейс...</option>';

                    availableTrips.forEach(tripDate => {
                        const option = document.createElement("option");
                        option.value = tripDate;
                        option.textContent = formatTripDate(tripDate);
                        selector.appendChild(option);
                    });

                    if (availableTrips.length === 0) {
                        showError("Рейсы не найдены. Создайте новый рейс через систему бронирования или вкладку Создать рейс.");
                    }
                } catch (error) {
                    throw new Error("Не удалось загрузить список рейсов: " + (error.message || error));
                }
            }

            async function loadSelectedTrip() {
                const selectedTrip = document.getElementById("activeTripSelector").value;

                if (!selectedTrip) {
                    return;
                }

                showLoader("Загрузка данных рейса...");
                try {
                    currentTripDate = selectedTrip;
                    await loadTripData(selectedTrip);
                    updateCurrentTripInfo(selectedTrip);
                    applyFilters();
                } catch (error) {
                    showError("Ошибка загрузки рейса: " + (error.message || error));
                } finally {
                    hideLoader();
                }
            }

            async function loadTripData(tripDate) {
                try {
                    const response = await makeGoogleScriptRequest("getSeats", { tripDate });
                    allBookings = response || [];

                    const tSettings = await makeGoogleScriptRequest("getTripSettings", { tripDate });
                    if (tSettings && tSettings.direction) {
                        const routeFilter = document.getElementById("routeFilter");
                        if (routeFilter && ![...routeFilter.options].some(opt => opt.value === tSettings.direction)) {
                            const option = document.createElement("option");
                            option.value = tSettings.direction;
                            option.textContent = tSettings.direction;
                            routeFilter.appendChild(option);
                        }
                    }
                } catch (error) {
                    throw new Error("Не удалось загрузить данные рейса: " + (error.message || error));
                }
            }

            function updateCurrentTripInfo(tripDate) {
                document.getElementById("currentTripDate").textContent = formatTripDate(tripDate);
                document.getElementById("currentTripInfo").style.display = "block";
            }

            function setDefaultDateRange() {
                const today = new Date();
                const oneMonthAgo = new Date(today); oneMonthAgo.setMonth(today.getMonth() - 1);
                const oneMonthFromNow = new Date(today); oneMonthFromNow.setMonth(today.getMonth() + 1);

                document.getElementById("dateFrom").value = oneMonthAgo.toISOString().split("T")[0];
                document.getElementById("dateTo").value = oneMonthFromNow.toISOString().split("T")[0];
            }

            function applyFilters() {
                if (!allBookings.length) {
                    updateStatistics();
                    renderBookings([]);
                    return;
                }

                const dateFrom = document.getElementById("dateFrom").value;
                const dateTo = document.getElementById("dateTo").value;
                const statusFilter = document.getElementById("statusFilter").value;
                const routeFilter = document.getElementById("routeFilter").value;

                filteredBookings = allBookings.filter((booking) => {
                    if (dateFrom && dateTo && booking.tripDate) {
                        const bookingDate = new Date(booking.tripDate);
                        const fromDate = new Date(dateFrom);
                        const toDate = new Date(dateTo);
                        if (bookingDate < fromDate || bookingDate > toDate) return false;
                    }

                    if (statusFilter && booking.status !== statusFilter) return false;

                    if (routeFilter) {
                        const isRouteMatch = checkRouteMatch(booking, routeFilter);
                        if (!isRouteMatch) return false;
                    }

                    return true;
                });

                updateStatistics();
                renderBookings(filteredBookings);
            }

            function checkRouteMatch(booking, routeFilter) {
                if (routeFilter === "Молдова → Россия") {
                    return booking.fromCity && booking.toCity &&
                           (booking.fromCity.toLowerCase().includes("молдов") || booking.toCity.toLowerCase().includes("росси"));
                }
                if (routeFilter === "Россия → Молдова") {
                    return booking.fromCity && booking.toCity &&
                           (booking.fromCity.toLowerCase().includes("росси") || booking.toCity.toLowerCase().includes("молдов"));
                }
                return true;
            }

            function updateStatistics() {
                const bookings = filteredBookings.length ? filteredBookings : allBookings;
                const total = bookings.length;
                const booked = bookings.filter(b => b.status === "забронировано").length;
                const confirmed = bookings.filter(b => b.status === "подтверждено").length;
                const free = bookings.filter(b => b.status === "свободно").length;

                document.getElementById("totalSeats").textContent = total || "-";
                document.getElementById("bookedSeats").textContent = booked || "-";
                document.getElementById("confirmedSeats").textContent = confirmed || "-";
                document.getElementById("freeSeats").textContent = free || "-";
            }

            function renderBookings(bookings) {
                const container = document.getElementById("bookingsList");
                if (!bookings.length) {
                    container.innerHTML = `
                        <div class="no-data">
                            <i class="fas fa-search" style="font-size:3rem;margin-bottom:15px;color:#ddd;"></i>
                            <h3>Нет данных для отображения</h3>
                            <p>Измените фильтры на вкладке Статистика или выберите другой рейс</p>
                        </div>`;
                    return;
                }
                container.innerHTML = bookings.map((booking) => createBookingCard(booking)).join("");
            }

            function createBookingCard(booking) {
                const statusClass = getStatusClass(booking.status);
                const isEmpty = booking.status === "свободно";

                return `
                <div class="booking-card ${isEmpty ? "compact" : ""}">
                    <div class="card-header">
                        <div class="seat-info"><div class="seat-number">${booking.seat}</div></div>
                        <span class="status-badge ${statusClass}">${booking.status}</span>
                    </div>
                    ${
                        !isEmpty
                            ? `
                        <div class="booking-details">
                            <div class="detail-item"><span class="detail-label">Пассажир</span><span class="detail-value">${booking.name || "-"}</span></div>
                            <div class="detail-item"><span class="detail-label">Телефон</span><span class="detail-value">${booking.phone || "-"}</span></div>
                            <div class="detail-item"><span class="detail-label">Email</span><span class="detail-value">${booking.email || "-"}</span></div>
                            <div class="detail-item"><span class="detail-label">Маршрут</span><span class="detail-value">${booking.fromCity || "-"} → ${booking.toCity || "-"}</span></div>
                            <div class="detail-item"><span class="detail-label">Цена / Оплачено</span><span class="detail-value">${booking.basePrice || "-"} / ${booking.actualPrice || "-"}</span></div>
                            <div class="detail-item"><span class="detail-label">Багаж</span><span class="detail-value">${booking.luggageWeight || 0} кг (${booking.luggagePieces || 0} мест)</span></div>
                            <div class="detail-item"><span class="detail-label">Дата рейса</span><span class="detail-value">${booking.tripDate ? formatTripDate(booking.tripDate) : (currentTripDate ? formatTripDate(currentTripDate) : "-")}</span></div>
                            <div class="detail-item"><span class="detail-label">Дата бронирования</span><span class="detail-value">${booking.time || "-"}</span></div>
                            <div class="detail-item"><span class="detail-label">Код брони</span><span class="detail-value">${booking.code || "-"}</span></div>
                        </div>
                        <div class="action-btns">
                            ${ booking.status === "забронировано" ? `
                                <button class="action-btn confirm" onclick="confirmBooking('${booking.tripDate || currentTripDate}', ${booking.seat})">
                                    <i class="fas fa-check"></i> Подтвердить
                                </button>` : "" }
                            <button class="action-btn edit" onclick="editBooking(${booking.seat})"><i class="fas fa-edit"></i> Редактировать</button>
                            <button class="action-btn cancel" onclick="cancelBooking('${booking.tripDate || currentTripDate}', ${booking.seat})"><i class="fas fa-times"></i> Отменить</button>
                            ${ booking.phone ? `
                                <button class="action-btn whatsapp" onclick="openWhatsApp('${booking.phone}')"><i class="fab fa-whatsapp"></i> WhatsApp</button>
                                <button class="action-btn telegram" onclick="openTelegram('${booking.phone}')"><i class="fab fa-telegram"></i> Telegram</button>
                                <button class="action-btn call" onclick="makeCall('${booking.phone}')"><i class="fas fa-phone"></i> Позвонить</button>` : "" }
                        </div>` : "" }
                </div>`;
            }

            function getStatusClass(status) {
                switch (status) {
                    case "забронировано": return "status-booked";
                    case "подтверждено": return "status-confirmed";
                    case "свободно": return "status-free";
                    default: return "status-free";
                }
            }

            async function confirmBooking(tripDate, seat) {
                if (!confirm("Подтвердить бронирование?")) return;
                showLoader("Подтверждение бронирования...");
                try {
                    await makeGoogleScriptRequest("confirmBooking", { tripDate, seat });
                    await loadTripData(tripDate);
                    applyFilters();
                    showSuccess("Бронирование подтверждено");
                } catch (error) {
                    showError("Ошибка подтверждения: " + (error.message || error));
                } finally {
                    hideLoader();
                }
            }

            async function cancelBooking(tripDate, seat) {
                if (!confirm("Отменить бронирование? Это действие нельзя отменить.")) return;
                showLoader("Отмена бронирования...");
                try {
                    await makeGoogleScriptRequest("cancelBooking", { tripDate, seat });
                    await loadTripData(tripDate);
                    applyFilters();
                    showSuccess("Бронирование отменено");
                } catch (error) {
                    showError("Ошибка отмены: " + (error.message || error));
                } finally {
                    hideLoader();
                }
            }

            function editBooking(seat) {
                const booking = allBookings.find((b) => b.seat === seat);
                if (!booking) return;
                document.getElementById("editName").value = booking.name || "";
                document.getElementById("editPhone").value = booking.phone || "";
                document.getElementById("editEmail").value = booking.email || "";
                document.getElementById("editFromCity").value = booking.fromCity || "";
                document.getElementById("editToCity").value = booking.toCity || "";
                document.getElementById("editLuggageWeight").value = booking.luggageWeight || "";
                document.getElementById("editLuggagePieces").value = booking.luggagePieces || "";
                document.getElementById("editActualPrice").value = booking.actualPrice || "";
                document.getElementById("editForm").dataset.seat = seat;
                document.getElementById("editModal").classList.add("active");
            }

            async function saveEditedBooking(event) {
                event.preventDefault();
                const seat = event.target.dataset.seat;
                const formData = {
                    tripDate: currentTripDate,
                    seat: seat,
                    name: document.getElementById("editName").value,
                    phone: document.getElementById("editPhone").value,
                    email: document.getElementById("editEmail").value,
                    fromCity: document.getElementById("editFromCity").value,
                    toCity: document.getElementById("editToCity").value,
                    luggageWeight: document.getElementById("editLuggageWeight").value,
                    luggagePieces: document.getElementById("editLuggagePieces").value,
                    actualPrice: document.getElementById("editActualPrice").value,
                };

                showLoader("Сохранение изменений...");
                try {
                    await makeGoogleScriptRequest("updateBooking", formData);
                    await loadTripData(currentTripDate);
                    applyFilters();
                    closeEditModal();
                    showSuccess("Бронирование обновлено");
                } catch (error) {
                    showError("Ошибка сохранения: " + (error.message || error));
                } finally {
                    hideLoader();
                }
            }

            function closeEditModal() { document.getElementById("editModal").classList.remove("active"); }

            function openWhatsApp(phone) { window.open(`https://wa.me/${phone.replace(/\D/g,"")}`, "_blank"); }
            function openTelegram(phone) { window.open(`https://t.me/+${phone.replace(/\D/g,"")}`, "_blank"); }
            function makeCall(phone) { window.open(`tel:${phone}`, "_self"); }

            function exportToExcel() {
                if (!filteredBookings.length && !allBookings.length) { showError("Нет данных для экспорта"); return; }
                const dataToExport = filteredBookings.length ? filteredBookings : allBookings;
                const worksheet = XLSX.utils.json_to_sheet(
                    dataToExport.map((booking) => ({
                        "Место": booking.seat,
                        "Статус": booking.status,
                        "Имя": booking.name || "",
                        "Телефон": booking.phone || "",
                        "Email": booking.email || "",
                        "Город посадки": booking.fromCity || "",
                        "Город высадки": booking.toCity || "",
                        "Базовая цена": booking.basePrice || "",
                        "Фактическая оплата": booking.actualPrice || "",
                        "Багаж (кг)": booking.luggageWeight || "",
                        "Мест багажа": booking.luggagePieces || "",
                        "Доплата за багаж": booking.luggageExtra || "",
                        "Дата бронирования": booking.time || "",
                        "Код брони": booking.code || ""
                    })),
                );
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Бронирования");
                const filename = `bookings_${currentTripDate || "filtered"}_${new Date().toISOString().split("T")[0]}.xlsx`;
                XLSX.writeFile(workbook, filename);
            }

            async function makeGoogleScriptRequest(action, params = {}) {
                try {
                    const url = new URL(GOOGLE_SCRIPT_URL);
                    url.searchParams.set("action", action);
                    Object.entries(params).forEach(([k, v]) => { if (v !== null && v !== undefined) url.searchParams.set(k, v); });

                    const response = await fetch(url, { method: "GET", mode: "cors" });
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                    const data = await response.json();

                    if (data && data.error) throw new Error(data.error);
                    return data;
                } catch (error) {
                    console.error(`API call failed:`, error);
                    throw new Error(`Ошибка API: ${error.message || error}`);
                }
            }

            function formatTripDate(dateString) {
                try {
                    const date = new Date(dateString);
                    return date.toLocaleDateString("ru-RU", { year:"numeric", month:"long", day:"numeric" });
                } catch { return dateString; }
            }

            // Create Trip Tab actions
            async function createTripFromAdmin() {
                const tripDate = document.getElementById('newTripDate').value;
                if (!tripDate) { showError('Укажите дату'); return; }
                const direction = document.getElementById('newTripDirection').value;
                const basePrice = document.getElementById('newTripBasePrice').value || 500;
                const fuelCost = document.getElementById('newFuelCost').value || 0;
                const foodCost = document.getElementById('newFoodCost').value || 0;
                const otherCosts = document.getElementById('newOtherCosts').value || 0;
                const driverFoodCost = document.getElementById('newDriverFoodCost').value || 0;
                const baseCurrency = document.getElementById('newBaseCurrency').value || '';
                const rateEurMdl = document.getElementById('newRateEurMdl').value || '';
                const rateEurRub = document.getElementById('newRateEurRub').value || '';
                showLoader('Создание рейса...');
                try {
                    await makeGoogleScriptRequest('createTrip', { tripDate, direction, basePrice });
                    await makeGoogleScriptRequest('updateTripSettings', { tripDate, direction, basePrice, fuelCost, foodCost, otherCosts, driverFoodCost, baseCurrency, rateEurMdl, rateEurRub });
                    await loadAvailableTrips();
                    showSuccess('Рейс создан');
                } catch (e) { showError(e.message || e); } finally { hideLoader(); }
            }

            async function loadTripSettingsIntoForm() {
                const tripDate = document.getElementById('settingsTripSelector').value;
                if (!tripDate) return;
                showLoader('Загрузка параметров...');
                try {
                    const s = await makeGoogleScriptRequest('getTripSettings', { tripDate });
                    if (s) {
                        document.getElementById('settingsDirection').value = s.direction || 'Молдова → Россия';
                        document.getElementById('settingsBasePrice').value = s.basePrice || '';
                        document.getElementById('settingsFuelCost').value = s.fuelCost || '';
                        document.getElementById('settingsFoodCost').value = s.foodCost || '';
                        document.getElementById('settingsOtherCosts').value = s.otherCosts || '';
                        document.getElementById('settingsDriverFoodCost').value = s.driverFoodCost || '';
                        document.getElementById('settingsBaseCurrency').value = s.baseCurrency || 'EUR';
                        document.getElementById('settingsRateEurMdl').value = s.rateEurMdl || '';
                        document.getElementById('settingsRateEurRub').value = s.rateEurRub || '';
                    }
                } catch (e) { console.warn(e); } finally { hideLoader(); }
            }

            async function saveTripSettingsFromAdmin() {
                const tripDate = document.getElementById('settingsTripSelector').value;
                if (!tripDate) { showError('Выберите рейс'); return; }
                const direction = document.getElementById('settingsDirection').value;
                const basePrice = document.getElementById('settingsBasePrice').value;
                const fuelCost = document.getElementById('settingsFuelCost').value;
                const foodCost = document.getElementById('settingsFoodCost').value;
                const otherCosts = document.getElementById('settingsOtherCosts').value;
                const driverFoodCost = document.getElementById('settingsDriverFoodCost').value;
                const baseCurrency = document.getElementById('settingsBaseCurrency').value;
                const rateEurMdl = document.getElementById('settingsRateEurMdl').value;
                const rateEurRub = document.getElementById('settingsRateEurRub').value;
                showLoader('Сохранение параметров...');
                try {
                    await makeGoogleScriptRequest('updateTripSettings', { tripDate, direction, basePrice, fuelCost, foodCost, otherCosts, driverFoodCost, baseCurrency, rateEurMdl, rateEurRub });
                    showSuccess('Параметры сохранены');
                } catch (e) { showError(e.message || e); } finally { hideLoader(); }
            }

            // Code lookup (admin, full info)
            async function lookupByCode(mask = false) {
                const code = document.getElementById('lookupCode').value.trim();
                if (!code) { showError('Введите код'); return; }
                showLoader('Поиск...');
                try {
                    const booking = await makeGoogleScriptRequest('getBookingByCode', { code, mask: String(mask) });
                    const box = document.getElementById('lookupResult');
                    if (!booking) { box.innerHTML = '<div class="no-data">Не найдено</div>'; return; }
                    box.innerHTML = `
                        <div class="booking-card">
                            <div class="card-header"><div class="seat-info"><div class="seat-number">${booking.seat}</div></div><span class="status-badge ${getStatusClass(booking.status)}">${booking.status}</span></div>
                            <div class="booking-details">
                                <div class="detail-item"><span class="detail-label">Дата рейса</span><span class="detail-value">${formatTripDate(booking.tripDate)}</span></div>
                                <div class="detail-item"><span class="detail-label">Пассажир</span><span class="detail-value">${booking.name || '-'}</span></div>
                                <div class="detail-item"><span class="detail-label">Телефон</span><span class="detail-value">${booking.phone || '-'}</span></div>
                                <div class="detail-item"><span class="detail-label">Email</span><span class="detail-value">${booking.email || '-'}</span></div>
                                <div class="detail-item"><span class="detail-label">Маршрут</span><span class="detail-value">${booking.fromCity || '-'} → ${booking.toCity || '-'}</span></div>
                                <div class="detail-item"><span class="detail-label">Дата брони</span><span class="detail-value">${booking.time || '-'}</span></div>
                                <div class="detail-item"><span class="detail-label">Код</span><span class="detail-value">${booking.code || '-'}</span></div>
                            </div>
                        </div>`;
                } catch (e) { showError(e.message || e); } finally { hideLoader(); }
            }

            function showLoader(message = "Загрузка...") {
                document.querySelector(".loader-text").textContent = message;
                document.getElementById("loader").classList.add("active");
            }
            function hideLoader() { document.getElementById("loader").classList.remove("active"); }
            function showError(message) { alert("Ошибка: " + message); }
            function showSuccess(message) { alert("Успех: " + message); }
        </script>
    </body>
</html>
